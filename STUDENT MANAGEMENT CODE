
~~~
import java.io.*;
import java.util.*;

class Student implements Serializable {
    private int rollNumber;
    private String name;
    private String course;
    private int marks;

    public Student(int rollNumber, String name, String course, int marks) {
        this.rollNumber = rollNumber;
        this.name = name;
        this.course = course;
        this.marks = marks;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public String getName() {
        return name;
    }

    public String getCourse() {
        return course;
    }

    public int getMarks() {
        return marks;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public void setMarks(int marks) {
        this.marks = marks;
    }

    @Override
    public String toString() {
        return "Roll Number: " + rollNumber + ", Name: " + name + ", Course: " + course + ", Marks: " + marks;
    }
}

public class Main {

    private static final String FILE_NAME = "students.dat";
    private static List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        loadStudents();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nStudent Management System");
            System.out.println("1. Add New Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student Information");
            System.out.println("4. Delete Student Record");
            System.out.println("5. Search for Student");
            System.out.println("6. Generate Report");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    addNewStudent(scanner);
                    break;
                case 2:
                    viewAllStudents();
                    break;
                case 3:
                    updateStudent(scanner);
                    break;
                case 4:
                    deleteStudent(scanner);
                    break;
                case 5:
                    searchStudent(scanner);
                    break;
                case 6:
                    generateReport();
                    break;
                case 7:
                    saveStudents();
                    System.out.println("Exiting... Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 7);

        scanner.close();
    }

    private static void addNewStudent(Scanner scanner) {
        System.out.print("Enter Roll Number: ");
        int rollNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Course: ");
        String course = scanner.nextLine();
        System.out.print("Enter Marks: ");
        int marks = scanner.nextInt();

        students.add(new Student(rollNumber, name, course, marks));
        System.out.println("Student added successfully.");
    }

    private static void viewAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No student records found.");
            return;
        }

        System.out.println("\nStudent Records:");
        for (Student student : students) {
            System.out.println(student);
        }
    }

    private static void updateStudent(Scanner scanner) {
        System.out.print("Enter Roll Number of the student to update: ");
        int rollNumber = scanner.nextInt();

        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                scanner.nextLine(); // Consume newline
                System.out.print("Enter New Name: ");
                student.setName(scanner.nextLine());
                System.out.print("Enter New Course: ");
                student.setCourse(scanner.nextLine());
                System.out.print("Enter New Marks: ");
                student.setMarks(scanner.nextInt());
                System.out.println("Student updated successfully.");
                return;
            }
        }

        System.out.println("Student with Roll Number " + rollNumber + " not found.");
    }

    private static void deleteStudent(Scanner scanner) {
        System.out.print("Enter Roll Number of the student to delete: ");
        int rollNumber = scanner.nextInt();

        Iterator<Student> iterator = students.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().getRollNumber() == rollNumber) {
                iterator.remove();
                System.out.println("Student deleted successfully.");
                return;
            }
        }

        System.out.println("Student with Roll Number " + rollNumber + " not found.");
    }

    private static void searchStudent(Scanner scanner) {
        System.out.print("Enter Roll Number or Name to search: ");
        scanner.nextLine(); // Consume newline
        String query = scanner.nextLine().toLowerCase();

        for (Student student : students) {
            if (String.valueOf(student.getRollNumber()).equals(query) || student.getName().toLowerCase().contains(query)) {
                System.out.println("Student Found: " + student);
                return;
            }
        }

        System.out.println("No student records match your query.");
    }

    private static void generateReport() {
        if (students.isEmpty()) {
            System.out.println("No student records found.");
            return;
        }

        int totalMarks = 0;
        for (Student student : students) {
            totalMarks += student.getMarks();
        }

        double averageMarks = (double) totalMarks / students.size();
        System.out.println("\nReport:");
        System.out.println("Total Students: " + students.size());
        System.out.println("Total Marks: " + totalMarks);
        System.out.println("Average Marks: " + averageMarks);
    }

    private static void saveStudents() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(students);
            System.out.println("Student records saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving student records: " + e.getMessage());
        }
    }

    private static void loadStudents() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            students = (List<Student>) ois.readObject();
        } catch (FileNotFoundException e) {
            System.out.println("No previous student records found. Starting fresh.");
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading student records: " + e.getMessage());
        }
    }
}
~~~
